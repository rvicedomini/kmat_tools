#!/bin/bash

# Authors: Camila Duitama, Francesco Andreace, Riccardo Vicedomini
# Description: Pipeline to create an abundance unitig matrix from a collection of FASTA/FASTQ files

set -e

MUSET_VERSION="0.2"

SCRIPT_DIR=$(dirname $(readlink -f $0))
# Ensure to use the kmat_tools executable within the same folder of this script
export PATH="${SCRIPT_DIR}${PATH:+:${PATH}}"

SCRIPT_NAME=$(basename $0)
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
LOG_FILE="./${SCRIPT_NAME}_${TIMESTAMP}.log"

# Define the log function
log() {
    local message="$1"
    local timestamp=$(date +"[%Y-%m-%d %H:%M:%S.%3N]")
    echo "${timestamp} ${message}" | tee -a "${LOG_FILE}"
}

# Define the log_and_run function
log_and_run() {
    local command="$@"
    log "[COMMAND]:: Running: $command"
    {
        "$@" 2>&1 | while IFS= read -r line
        do
            log "$line"
        done
        # Check exit status of the command
        if [ ${PIPESTATUS[0]} -ne 0 ]; then
            log "Command failed with exit status ${PIPESTATUS[0]}"
            exit 1  # Exit the script if the command fails
        fi

    }
}
# SETTING DEFAULT PARAMETERS
DEFAULT_KSIZE=31
DEFAULT_WSIZE=14
DEFAULT_THREADS=4
DEFAULT_UTG_MIN_SIZE=100
DEFAULT_MIN_KMER_ABUNDANCE=2
DEFAULT_FRAC_SAMPLES_ABSENT=0.1
DEFAULT_FRAC_SAMPLES_PRESENT=0.1
DEFAULT_UTG_MIN=100
DEFAULT_KMTRICKS_RECURRENCE_MIN=1
DEFAULT_MINIMIZER_LENGTH=15
DEFAULT_OUTDIR=output

USAGE="muset v${MUSET_VERSION}

DESCRIPTION:
   muset - a pipeline for building an abundance unitig matrix from a list of FASTA/FASTQ files.

USAGE:
   muset [options] INPUT_FILE

OPTIONS:
   -i PATH    skip matrix construction and run the pipeline with a previosuly computed matrix
   -k INT     k-mer size (default: 31)
   -a INT     min abundance to keep a k-mer (default: 2)
   -u INT     minimum size of the unitigs to be retained in the final matrix (default: 100)
   -o PATH    output directory (default: output)
   -m INT     minimizer length  (default: 15)
   -n INT     minimum number of samples from which a k-mer should be absent (mutually exclusive with -f)
   -f FLOAT   fraction of samples from which a k-mer should be absent (default: 0.1, mutually exclusive with -n)
   -N INT     minimum number of samples in which a k-mer should be present (mutually exclusive with -F)
   -F FLOAT   fraction of samples in which a k-mer should be present (default: 0.1, mutually exclusive with -N)
   -t INT     number of cores (default: 4)
   -s         write the unitig sequence in the first column of the output matrix instead of the identifier
   -h         show this help message and exit
   -V         show version number and exit

POSITIONAL ARGUMENTS:
    INPUT_FILE   Input file (fof) containing the description of input samples.
                 It is ignored if -i option is used.

NOTES:
   Options -n and -f are mutually exclusive, as well as options -N and -F.
   When either -n or -f is used, -N or -F must also be provided, and vice versa.
   If none of the -n, -N, -f, -F options are used the last two options are used with their default values.
"

# Parsing input options
k_len=$DEFAULT_KSIZE
thr=$DEFAULT_THREADS
utg_len=$DEFAULT_UTG_MIN_SIZE
min_kmer_abundance=$DEFAULT_MIN_KMER_ABUNDANCE
output_dir=$DEFAULT_OUTDIR
rec_min=$DEFAULT_KMTRICKS_RECURRENCE_MIN
minimizer_length=$DEFAULT_MINIMIZER_LENGTH
frac_samples_absent=$DEFAULT_FRAC_SAMPLES_ABSENT
frac_samples_present=$DEFAULT_FRAC_SAMPLES_PRESENT
param_n=""
param_N=""
param_s=""
skip_matrix_construction=false
input_matrix=""

# Function to check if a value is an integer
is_integer() {
    local s="$1"
    if ! [[ "$s" =~ ^-?[0-9]+$ ]]; then
        return 1
    fi
    return 0
}

while getopts ":k:t:u:a:i:n:N:f:F:o:m:shV" opt; do
    case "${opt}" in
    k) k_len=${OPTARG}
       ;;
    t) thr=${OPTARG}
       ;;
    u) utg_len=${OPTARG}
       ;;
    i) input_matrix="${OPTARG}"
       if [ ! -f "${input_matrix}" ] || [ ! -s "${input_matrix}" ]; then
           log "ERROR: Input matrix \"${input_matrix}\" is not a file or is empty"
           exit 1
       fi
       skip_matrix_construction=true
       ;;
    o) output_dir=${OPTARG}
       ;;
    n)
       if [ -n "$param_n" ]; then
           log "ERROR: Cannot combine -n with -f"
           log "Try 'muset -h' for more information."
           exit 1
       fi
       if ! is_integer "${OPTARG}"; then
           log "ERROR: -n argument must be an integer."
           exit 1
       fi
       param_n="-n ${OPTARG}"
       ;;
    N)
       if [ -n "$param_N" ]; then
           log "ERROR: Cannot combine -N with -F"
           log "Try 'muset -h' for more information."
           exit 1
       fi
       if ! is_integer "${OPTARG}"; then
           log "ERROR: -N argument must be an integer."
           exit 1
       fi
       rec_min=${OPTARG}
       param_N="-N ${rec_min}"
       ;;
    f) 
       if [ -n "$param_n" ]; then
           log "ERROR: Cannot combine -f with -n"
           log "Try 'muset -h' for more information."
           exit 1
       fi
       param_n="-f ${OPTARG}"
       ;;
    F) 
       if [ -n "$param_N" ]; then
           log "ERROR: Cannot combine -F with -N"
           log "Try 'muset -h' for more information."
           exit 1
       fi
       param_N="-F ${OPTARG}"
       ;;
    a) min_kmer_abundance=${OPTARG}
       ;;
    m) minimizer_length=${OPTARG}
       ;;
    s) param_s="-s"
       ;;
    h) log "${USAGE}"
       exit 0
       ;;
    V) log "muset v${MUSET_VERSION}"
       exit 0
       ;;
    :) log -e "ERROR: Option -${OPTARG} requires an argument\n"
       log "Try 'muset -h' for more information."
       exit 1
       ;;
    \?) log "Invalid option: -${OPTARG}"
        log "Try 'muset -h' for more information."
        exit 1
        ;;
    esac
done

shift $((OPTIND-1))

# ADDING INPUT FILE AND OUTPUT FOLDER

input_file=""

# Check if user inputs the right number of arguments
if [ "${skip_matrix_construction}" != true ]; then
    
    if [ $# -ne 1 ]; then
        log "ERROR: Input file missing."
        log "Try 'muset -h' for more information."
        exit 1
    fi

    input_file=$1

    if [ ! -f "$input_file" ]; then
        log "ERROR: Input file \"${input_file}\" does not exist."
        exit 1
    fi
fi

# Validate that minimizer length is smaller than k_len
if [ "$minimizer_length" -ge "$k_len" ]; then
    log "Error: Minimizer length (-m) value ($minimizer_length) must be smaller than k-mer size (-k) value ($k_len)."
    exit 1
fi

# Strip trailing slash from output_dir if present
if [[ "$output_dir" == */ ]]; then
    output_dir="${output_dir%/}"
fi

# Check if -n/-N or -f/-F have been properly provided or set default filter
if [ -z "$param_n" ] && [ -z "$param_N" ]; then
    param_n="-f $frac_samples_absent"
    param_N="-F $frac_samples_present"
elif [ -z "$param_n" ]; then
    echo "Error: Either -n or -f must be specified."
    echo "Try 'muset -h' for more information."
    exit 1
elif [ -z "$param_N" ]; then
    echo "Error: Either -N or -F must be specified."
    echo "Try 'muset -h' for more information."
    exit 1
fi

# Parameters
log "muset v${MUSET_VERSION}"
log "k-mer size (-k): ${k_len}"
log "Number of threads (-t): ${thr}"
log "Minimum unitig size (-u): ${utg_len}"
log "Minimizer length (-m): ${minimizer_length}"
log "Minimum abundance (-a): ${min_kmer_abundance}"
log "Skip matrix construction (-s): ${skip_matrix_construction}"
log "Filter settings: $param_n $param_N"
log "Input file: ${input_file}"
log "Output directory (-o): ${output_dir}"

start=$(date +%s%3N)

# Step 1: Produce sorted input k-mer matrix from fof.txt file unless -s flag is set
if [ "${skip_matrix_construction}" != true ]; then
    log_and_run kmtricks pipeline --file $input_file --kmer-size $k_len --hard-min ${min_kmer_abundance} --mode kmer:count:bin --cpr --run-dir $output_dir -t $thr --recurrence-min $rec_min
    log_and_run kmtricks aggregate --matrix kmer --format text --cpr-in --sorted --output $output_dir/sorted_matrix.txt --run-dir $output_dir -t $thr
    input_matrix="${output_dir}/sorted_matrix.txt"
else

    # Warning user that some parameters must be consistent between the input matrix and the ones set for the pipeline
    log "WARNING:  You are providing your own input matrix. Please check that the muset parameters" 
    log "          k=$k_len (k-mer size), m=$minimizer_length (minimizer size) and a=$min_kmer_abundance (minimum k-mer abundance) you are using"
    log "          are consistent with the ones you used for the matrix construction."

    # Sanity check on the k-mer lenght. Cheking the length of the first kmer in the matrix is the same of the k_len in muset
    matrix_klen=$(awk 'NR==1 {print length($1); exit 0}' $input_matrix)

    if [ $matrix_klen != $k_len ]; 
    then
        log "ERROR: the kmer length of the input matrix you provided is $matrix_klen, while in MUSET is set to $k_len."
        exit 1 
    fi

    log "Skipped matrix construction. Using matrix provided in \"${input_matrix}\"">&2
    mkdir -p "${output_dir}"
fi

if [ ! -d "${output_dir}" ]; then
    log "Error: The output directory $output_dir does not exist."
    exit 1
fi

if [ ! -f "${input_matrix}" ] || [ ! -s "${input_matrix}" ]; then
    log "Matrix file \"${input_matrix}\" does not exist or is empty."
    exit 1
fi

# Step 2: Perform some basic filtering
log_and_run kmat_tools filter "${input_matrix}" -a ${min_kmer_abundance} $param_n $param_N -o $output_dir/sorted_filtered_matrix.txt

# Check if filter was too stringent
if [ ! -s "$output_dir/sorted_filtered_matrix.txt" ]; then
    log "Your filters were too stringent. The output file sorted_filtered_matrix.txt is empty."
    exit 1
fi

# Step 3.1: Output matrix k-mers in a FASTA file
log_and_run kmat_tools fasta $output_dir/sorted_filtered_matrix.txt -o $output_dir/kmer_matrix.fasta

# Step 3.2: Build unitigs
log_and_run ggcat build $output_dir/kmer_matrix.fasta -o $output_dir/unitigs.fa -j $thr -s 1 -k $k_len

# Step 3.3: Filter out unitigs by length
log_and_run kmat_tools fafmt -l $utg_len -o $output_dir/unitigs_filtered.fa $output_dir/unitigs.fa

# Exit if unitig file is empty
if [ ! -s "$output_dir/unitigs_filtered.fa" ]; then
    log "Your filters were too stringent. The output file unitigs.mat is empty."
    exit 1
fi

# Step 4: Build unitig matrix
log_and_run kmat_tools unitig -k $k_len -m $minimizer_length -o $output_dir/unitigs.mat -t $thr ${param_s} $output_dir/unitigs_filtered.fa $output_dir/sorted_filtered_matrix.txt
log "Output unitig matrix written to: " $(readlink -f "${output_dir}/unitigs.mat")

runtime=$((`date +%s%3N`-$start)) && log "[PIPELINE]::[END]::[$runtime ms]"
exit 0